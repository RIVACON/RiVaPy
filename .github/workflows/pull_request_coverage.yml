name: pr_coverage
on: 
  workflow_dispatch:
  pull_request:
    branches:
      - develop

jobs:
  build-linux-pr:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5

    steps:
    - uses: actions/checkout@v3
    - uses: r-lib/actions/setup-pandoc@v2
      with:
        pandoc-version: '3.6' # The pandoc version to download (if necessary) and use.
    
    - name: Remove Preinstalled Miniconda
      run: sudo rm -rf /usr/share/miniconda /usr/local/bin/conda
    
    #- name: Install boost
    #  run: sudo apt-get install libboost-dev
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Miniconda 25.1.1-2
      run: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-py312_25.1.1-2-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        echo "$HOME/miniconda/bin" >> $GITHUB_PATH
        echo "CONDA=$HOME/miniconda" >> $GITHUB_ENV
        source $HOME/miniconda/bin/activate
        conda --version

      # $CONDA is an environment variable pointing to the root of the miniconda directory
    - name: Install dependencies
      run: |
        conda install -n base python=3.12 -y
        
        $CONDA/bin/conda env update --file environment.yml --name base
    #- name: Install pyvacon from pypi test
    #  run: $CONDA/bin/python -m pip install pyvacon 
    - name: Lint with flake8
      run: |
        $CONDA/bin/conda install flake8
        # stop the build if there are Python syntax errors or undefined names
        $CONDA/bin/flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        $CONDA/bin/flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: $CONDA/bin/python -m unittest discover tests
      shell: bash


    - name: Fetch previous coverage from gh-pages
      run: |
        # Fetch the previous coverage.xml from the gh-pages branch
        git fetch origin gh-pages:gh-pages || echo "No gh-pages branch yet"
        curl -s https://raw.githubusercontent.com/RIVACON/RiVaPy/gh-pages/coverage/coverage.xml -o previous_coverage.xml || echo "No previous coverage.xml found"

        # Parse the previous coverage.xml file and extract the total coverage percentage
        if [ -f "previous_coverage.xml" ]; then
          TOTAL_COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('previous_coverage.xml'); root = tree.getroot(); print(round(float(root.attrib['line-rate']) * 100))")
          echo "TOTAL_COVERAGE=$TOTAL_COVERAGE" >> $GITHUB_ENV
          echo "Previous coverage: $TOTAL_COVERAGE%"  # Just for logging
        else
          echo "TOTAL_COVERAGE=80" >> $GITHUB_ENV
          echo "No previous coverage found, using 80%."  # Default to 80% if no previous coverage
        fi

    - name: Run tests with coverage
      run: |
        coverage run -m unittest discover -s tests
        coverage report --fail-under=$TOTAL_COVERAGE
        coverage xml
        coverage html

    # - name: Generate Coverage Badge
    #   run: |
    #     pip install genbadge[coverage]
    #     genbadge coverage -i coverage.xml -o coverage.svg

    # - name: Upload coverage report
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: coverage-report
    #     path: htmlcov/
      
    # - name: Install rtd theme for sphinx doc from pypi
    #   run: $CONDA/bin/python -m pip install sphinx_rtd_theme 
    # - name: Build docs with sphinx
    #   run: $CONDA/bin/sphinx-build -b html docs/source/ docs/build
    # - name: Store doc as artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: DocumentationHTML
    #     path: docs/build/
        
    # - name: Commit documentation changes
    #   run: |
    #     git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/RIVACON/RiVaPy.git --branch gh-pages --single-branch gh-pages
    #     cp -r docs/build/* gh-pages/
    #     mkdir -p gh-pages/coverage_report       # Ensure coverage_report directory exists
    #     cp -r htmlcov/* gh-pages/coverage_report/  # Move coverage report
    #     mkdir -p gh-pages/coverage              # Ensure coverage directory exists
    #     mv coverage.svg gh-pages/coverage/      # Move coverage badge
    #     mv coverage.xml gh-pages/coverage/coverage.xml
    #     cd gh-pages
    #     touch .nojekyll
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add .
    #     git commit -m "Update documentation and Coverage" -a || true
    #     # The above command will fail if no changes were present, so we ignore
    #     # that.
    # - name: Push changes
    #   uses: ad-m/github-push-action@master
    #   with:
    #     branch: gh-pages
    #     directory: gh-pages
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
